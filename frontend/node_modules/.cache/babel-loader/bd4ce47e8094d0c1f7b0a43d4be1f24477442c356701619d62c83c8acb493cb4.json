{"ast":null,"code":"import { LOGIN_ENDPOINT, REFRESH_ENDPOINT, REGISTER_ENDPOINT } from './auth.constants';\nimport request from './api.request';\nclass AuthService {\n  constructor() {\n    this.login = this.login.bind(this);\n  }\n  async login(username, password) {\n    try {\n      const response = await request({\n        url: LOGIN_ENDPOINT,\n        method: 'POST',\n        data: {\n          username,\n          password\n        }\n      });\n      if (response.data.access) {\n        return this.setToken(response);\n      }\n    } catch (error) {\n      var _error$response;\n      console.error('Login failed:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n      return null;\n    }\n  }\n  logout() {\n    localStorage.removeItem('user');\n  }\n  async register({\n    username,\n    email,\n    password,\n    firstName,\n    lastName\n  }) {\n    try {\n      const response = await request({\n        url: REGISTER_ENDPOINT,\n        method: 'POST',\n        data: {\n          username,\n          email,\n          password,\n          first_name: firstName,\n          last_name: lastName\n        }\n      });\n\n      // Registration successful, now login\n      await this.login(username, password);\n      return response;\n    } catch (error) {\n      console.error('Registration error:', error);\n      return error.response;\n    }\n  }\n  setToken(response) {\n    localStorage.setItem('user', JSON.stringify(response.data));\n    return response.data;\n  }\n  async refreshToken() {\n    try {\n      const user = JSON.parse(localStorage.getItem('user'));\n      if (user.refresh) {\n        const response = await request({\n          url: REFRESH_ENDPOINT,\n          method: 'POST',\n          data: {\n            refresh: user.refresh\n          }\n        });\n        return response.data;\n      }\n    } catch (error) {\n      return error.response;\n    }\n  }\n}\nexport default new AuthService();","map":{"version":3,"names":["LOGIN_ENDPOINT","REFRESH_ENDPOINT","REGISTER_ENDPOINT","request","AuthService","constructor","login","bind","username","password","response","url","method","data","access","setToken","error","_error$response","console","message","logout","localStorage","removeItem","register","email","firstName","lastName","first_name","last_name","setItem","JSON","stringify","refreshToken","user","parse","getItem","refresh"],"sources":["/workspace/golf-app-frontend/frontend/src/services/auth.service.js"],"sourcesContent":["import {\n  LOGIN_ENDPOINT,\n  REFRESH_ENDPOINT,\n  REGISTER_ENDPOINT,\n} from './auth.constants';\n\nimport request from './api.request';\n\nclass AuthService {\n  constructor() {\n    this.login = this.login.bind(this);\n  }\n\n  async login(username, password) {\n    try {\n      const response = await request({\n        url: LOGIN_ENDPOINT,\n        method: 'POST',\n        data: {\n          username,\n          password,\n        },\n      });\n\n      if (response.data.access) {\n        return this.setToken(response);\n      }\n    } catch (error) {\n      console.error('Login failed:', error.response?.data || error.message);\n      return null;\n    }\n  }\n\n  logout() {\n    localStorage.removeItem('user');\n  }\n\n  async register({\n    username,\n    email,\n    password,\n    firstName,\n    lastName,\n  }) {\n    try {\n      const response = await request({\n        url: REGISTER_ENDPOINT,\n        method: 'POST',\n        data: {\n          username,\n          email,\n          password,\n          first_name: firstName,\n          last_name: lastName,\n        },\n      });\n\n      // Registration successful, now login\n      await this.login(username, password);\n      return response;\n    } catch (error) {\n      console.error('Registration error:', error);\n      return error.response;\n    }\n  } setToken(response) {\n    localStorage.setItem('user', JSON.stringify(response.data));\n    return response.data;\n  }\n\n  async refreshToken() {\n    try {\n      const user = JSON.parse(localStorage.getItem('user'));\n\n      if (user.refresh) {\n        const response = await request({\n          url: REFRESH_ENDPOINT,\n          method: 'POST',\n          data: {\n            refresh: user.refresh,\n          },\n        });\n\n        return response.data;\n      }\n    } catch (error) {\n      return error.response;\n    }\n  }\n}\n\nexport default new AuthService();\n"],"mappings":"AAAA,SACEA,cAAc,EACdC,gBAAgB,EAChBC,iBAAiB,QACZ,kBAAkB;AAEzB,OAAOC,OAAO,MAAM,eAAe;AAEnC,MAAMC,WAAW,CAAC;EAChBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,KAAK,GAAG,IAAI,CAACA,KAAK,CAACC,IAAI,CAAC,IAAI,CAAC;EACpC;EAEA,MAAMD,KAAKA,CAACE,QAAQ,EAAEC,QAAQ,EAAE;IAC9B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMP,OAAO,CAAC;QAC7BQ,GAAG,EAAEX,cAAc;QACnBY,MAAM,EAAE,MAAM;QACdC,IAAI,EAAE;UACJL,QAAQ;UACRC;QACF;MACF,CAAC,CAAC;MAEF,IAAIC,QAAQ,CAACG,IAAI,CAACC,MAAM,EAAE;QACxB,OAAO,IAAI,CAACC,QAAQ,CAACL,QAAQ,CAAC;MAChC;IACF,CAAC,CAAC,OAAOM,KAAK,EAAE;MAAA,IAAAC,eAAA;MACdC,OAAO,CAACF,KAAK,CAAC,eAAe,EAAE,EAAAC,eAAA,GAAAD,KAAK,CAACN,QAAQ,cAAAO,eAAA,uBAAdA,eAAA,CAAgBJ,IAAI,KAAIG,KAAK,CAACG,OAAO,CAAC;MACrE,OAAO,IAAI;IACb;EACF;EAEAC,MAAMA,CAAA,EAAG;IACPC,YAAY,CAACC,UAAU,CAAC,MAAM,CAAC;EACjC;EAEA,MAAMC,QAAQA,CAAC;IACbf,QAAQ;IACRgB,KAAK;IACLf,QAAQ;IACRgB,SAAS;IACTC;EACF,CAAC,EAAE;IACD,IAAI;MACF,MAAMhB,QAAQ,GAAG,MAAMP,OAAO,CAAC;QAC7BQ,GAAG,EAAET,iBAAiB;QACtBU,MAAM,EAAE,MAAM;QACdC,IAAI,EAAE;UACJL,QAAQ;UACRgB,KAAK;UACLf,QAAQ;UACRkB,UAAU,EAAEF,SAAS;UACrBG,SAAS,EAAEF;QACb;MACF,CAAC,CAAC;;MAEF;MACA,MAAM,IAAI,CAACpB,KAAK,CAACE,QAAQ,EAAEC,QAAQ,CAAC;MACpC,OAAOC,QAAQ;IACjB,CAAC,CAAC,OAAOM,KAAK,EAAE;MACdE,OAAO,CAACF,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,OAAOA,KAAK,CAACN,QAAQ;IACvB;EACF;EAAEK,QAAQA,CAACL,QAAQ,EAAE;IACnBW,YAAY,CAACQ,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACrB,QAAQ,CAACG,IAAI,CAAC,CAAC;IAC3D,OAAOH,QAAQ,CAACG,IAAI;EACtB;EAEA,MAAMmB,YAAYA,CAAA,EAAG;IACnB,IAAI;MACF,MAAMC,IAAI,GAAGH,IAAI,CAACI,KAAK,CAACb,YAAY,CAACc,OAAO,CAAC,MAAM,CAAC,CAAC;MAErD,IAAIF,IAAI,CAACG,OAAO,EAAE;QAChB,MAAM1B,QAAQ,GAAG,MAAMP,OAAO,CAAC;UAC7BQ,GAAG,EAAEV,gBAAgB;UACrBW,MAAM,EAAE,MAAM;UACdC,IAAI,EAAE;YACJuB,OAAO,EAAEH,IAAI,CAACG;UAChB;QACF,CAAC,CAAC;QAEF,OAAO1B,QAAQ,CAACG,IAAI;MACtB;IACF,CAAC,CAAC,OAAOG,KAAK,EAAE;MACd,OAAOA,KAAK,CAACN,QAAQ;IACvB;EACF;AACF;AAEA,eAAe,IAAIN,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}